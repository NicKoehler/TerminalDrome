diff --git a/src/main.rs b/src/main.rs
--- a/src/main.rs
+++ b/src/main.rs
@@ -135,7 +135,7 @@
 struct App {
     // ...
     now_playing: Option<usize>,
-    player_status: Arc<Mutex<PlayerStatus>>,
+    player_status: Arc<PlayerStatus>,
     temp_dir: Option<tempfile::TempDir>,
 }
 
@@ -156,7 +156,7 @@
             current_artist: loaded_state.current_artist.clone(),
             current_album: loaded_state.current_album.clone(),
             now_playing: loaded_state.now_playing,
-            player_status: Arc::new(Mutex::new(PlayerStatus {
+            player_status: Arc::new(PlayerStatus {
                 current_index: AtomicUsize::new(usize::MAX),
                 current_time: AtomicU64::new(0),
                 should_quit: AtomicBool::new(false),
-            })),
+            }),
             temp_dir: None,
         };
 
@@ -326,7 +326,7 @@
     }
 
     async fn stop_playback(&mut self) {
-        self.player_status.lock().await.should_quit.store(true, Ordering::Relaxed);
+        self.player_status.should_quit.store(true, Ordering::Relaxed);
         if let Some(mut player) = self.current_player.take() {
             let _ = player.kill();
         }
@@ -336,8 +336,8 @@
 
     async fn update_now_playing(&mut self) {
         let current_index = {
-            let status = self.player_status.lock().await;
-            status.current_index.load(Ordering::Relaxed)
+            self.player_status.current_index.load(Ordering::Relaxed)
         };
+
         if current_index != usize::MAX {
             let valid_index = current_index.min(self.songs.len().saturating_sub(1));
             if self.now_playing != Some(valid_index) {
@@ -349,15 +349,14 @@
         }
     }
 
-    async fn get_now_playing_info(&self) -> String {
+    fn get_now_playing_info(&self) -> String {
         self.now_playing
             .and_then(|i| self.songs.get(i))
-            .map(|song| async {
+            .map(|song| {
                 let total_sec = song.duration;
                 let total_min = total_sec / 60;
                 let total_sec = total_sec % 60;
                 
-                let status = self.player_status.lock().await;
-                let current_time_ms = status.current_time.load(Ordering::Relaxed);
+                let current_time_ms = self.player_status.current_time.load(Ordering::Relaxed);
                 let current_time = current_time_ms as f64 / 1000.0;
                 
                 let current_min = current_time as u64 / 60;
@@ -371,10 +370,10 @@
                     self.current_artist.as_ref().map(|a| a.name.as_str()).unwrap_or(""),
                     song.title,
                     progress_bar
-                ).await
+                )
             })
-            .unwrap_or_else(|| async { "⏹ No song playing".into() }).await
+            .unwrap_or_else(|| "⏹ No song playing".into())
     }
-}
+}
 
 impl ViewMode {
     fn previous(&self) -> Self {
@@ -541,7 +540,7 @@
         .block(Block::default().borders(Borders::TOP));
     frame.render_widget(status_block, status_bar[0]);
 
-    let now_playing = Paragraph::new(app.get_now_playing_info().await)
+    let now_playing = Paragraph::new(app.get_now_playing_info())
         .style(Style::default().fg(Color::Yellow).bg(Color::DarkGray))
         .block(Block::default());
     frame.render_widget(now_playing, status_bar[1]);
