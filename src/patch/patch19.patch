diff --git a/src/main.rs b/src/main.rs
--- a/src/main.rs
+++ b/src/main.rs
@@ -339,6 +339,9 @@
         let start_index = self.song_state.selected.clamp(0, self.songs.len().saturating_sub(1));
         println!("Starting playback at index: {} ({} songs)", start_index, self.songs.len());
 
+        // Reset player status
+        self.player_status.current_index.store(usize::MAX, Ordering::Release);
+
         self.temp_dir = Some(temp_dir);
         self.now_playing = Some(start_index);
 
@@ -349,6 +352,7 @@
             .arg("--no-terminal")
             .arg("--audio-display=no")
             .arg("--loop-playlist=no")
+            .arg("--idle=once")  // Keep mpv running after playlist ends
             .arg("--msg-level=all=error")
             .arg(format!("--input-ipc-server={}", socket_path_str));
 
@@ -382,8 +386,14 @@
                                             match name.as_str() {
                                                 "playlist-pos" => {
                                                     if let Some(index) = n.as_i64().or_else(|| n.as_f64().map(|f| f as i64)) {
-                                                        println!("MPV reported new index: {}", index);
-                                                        status_clone.current_index.store(index as usize, Ordering::Release);
+                                                        let new_index = index as usize;
+                                                        println!("MPV event: playlist-pos → {}", new_index);
+                                                        
+                                                        // Handle -1 (no media playing) and out-of-bounds
+                                                        if new_index < status_clone.songs.load(Ordering::Acquire).len() {
+                                                            status_clone.current_index.store(new_index, Ordering::Release);
+                                                            status_clone.force_ui_update.store(true, Ordering::Release);
+                                                        }
                                                     }
                                                 }
                                                 "time-pos" => {
@@ -433,17 +443,23 @@
     async fn update_now_playing(&mut self) {
         let current_index = self.player_status.current_index.load(Ordering::Acquire);
         let prev_index = self.now_playing.unwrap_or(usize::MAX);
+        let songs_len = self.songs.len();
         
-        // Only update if index changed and is valid
-        if current_index != prev_index && current_index < self.songs.len() {
-            println!("Updating now playing from {} to {}", prev_index, current_index);
-            
-            self.now_playing = Some(current_index);
-            self.song_state.selected = current_index;
-            
-            if prev_index != usize::MAX {
-                self.adjust_scroll();
-                self.save_state()
+        // Handle index changes and wrap-around
+        if current_index != prev_index {
+            if current_index < songs_len {
+                println!("Updating now playing from {} → {} (valid)", prev_index, current_index);
+                self.now_playing = Some(current_index);
+                self.song_state.selected = current_index;
+                self.adjust_scroll();
+                self.save_state()
+                    .unwrap_or_else(|e| eprintln!("Failed to save state: {}", e));
+            } else if current_index >= songs_len && songs_len > 0 {
+                // Handle end of playlist
+                println!("Playlist ended, resetting state");
+                self.now_playing = None;
+                self.player_status.current_index.store(usize::MAX, Ordering::Release);
+                self.save_state()
                     .unwrap_or_else(|e| eprintln!("Failed to save state: {}", e));
             }
         }
     }
