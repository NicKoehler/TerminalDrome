diff --git a/src/main.rs b/src/main.rs
--- a/src/main.rs
+++ b/src/main.rs
@@ -326,6 +326,7 @@
     async fn start_playback(&mut self, config: &Config) -> Result<()> {
         if let Some(mut player) = self.current_player.take() {
             let _ = player.kill();
+            println!("Stopped previous player instance");
         }
 
         let start_index = self.song_state.selected;
@@ -333,6 +334,11 @@
         let temp_dir = tempfile::tempdir()?;
         let socket_path = temp_dir.path().join("mpv.sock");
         let socket_path_str = socket_path.to_str().unwrap();
+        
+        // Validate playlist bounds
+        let start_index = start_index.clamp(0, self.songs.len().saturating_sub(1));
+        println!("Starting playback at index: {} ({} songs available)", 
+            start_index, 
+            self.songs.len());
 
         self.temp_dir = Some(temp_dir);
         self.now_playing = Some(start_index);
@@ -385,7 +391,7 @@
                                                 "playlist-pos" => {
                                                     if let Some(index) = n.as_i64().or_else(|| n.as_f64().map(|f| f as i64)) {
                                                         println!("MPV playlist position changed to: {}", index);
-                                                        status_clone.current_index.store(index as usize, Ordering::Relaxed);
+                                                        status_clone.current_index.store(index as usize, Ordering::Release);
                                                     }
                                                 }
                                                 "time-pos" => {
                                                     if let Some(time) = n.as_f64() {
@@ -409,7 +415,7 @@
                             Err(_) => tokio::time::sleep(Duration::from_secs(1)).await,
                         }
                         
-                        if status_clone.lock().await.should_quit.load(Ordering::Relaxed) {
+                        if status_clone.should_quit.load(Ordering::Acquire) {
                             break;
                         }
                         tokio::time::sleep(Duration::from_millis(100)).await;
                     }
@@ -434,14 +440,20 @@
     }
 
     async fn update_now_playing(&mut self) {
-        let current_index = self.player_status.current_index.load(Ordering::Relaxed);
-        if current_index != usize::MAX {
-            let valid_index = current_index.min(self.songs.len().saturating_sub(1));
-            if self.now_playing != Some(valid_index) {
-                self.now_playing = Some(valid_index);
-                self.song_state.selected = valid_index;
+        let current_index = self.player_status.current_index.load(Ordering::Acquire);
+        let prev_index = self.now_playing.unwrap_or(usize::MAX);
+        
+        // Only update if index changed and is valid
+        if current_index != prev_index && current_index < self.songs.len() {
+            println!("Updating now playing from {} to {}", prev_index, current_index);
+            
+            self.now_playing = Some(current_index);
+            self.song_state.selected = current_index;
+            
+            if prev_index != usize::MAX {
                 self.adjust_scroll();
-                self.save_state().unwrap_or_default();
+                self.save_state()
+                    .unwrap_or_else(|e| eprintln!("Failed to save state: {}", e));
             }
         }
     }
